plugins {
    id 'java'
}

group = 'isaacwallace123'
version = '1.0'

repositories {
    mavenCentral()

    // Paper Repositories \\

    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        url = 'https://repo.extendedclip.com/releases/'
    }

    // Plugin Repositories \\

    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }

    maven {
        name = "vault-repo"
        url = 'https://jitpack.io'
    }

    // Database Repositories \\

    maven {
        name = "mongodb-repo"
        url = "https://oss.sonatype.org/content/repositories/releases/"
    }
    maven {
        name = "mysql-repo"
        url = "https://repo1.maven.org/maven2/"
    }
    maven {
        name = "mariadb-repo"
        url = "https://repo1.maven.org/maven2/"
    }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.21.3-R0.1-SNAPSHOT")

    // Plugin Dependencies \\

    compileOnly 'me.clip:placeholderapi:2.11.6'
    compileOnly "com.github.MilkBowl:VaultAPI:1.7"
    implementation 'fr.mrmicky:fastboard:2.1.3'

    // Database Dependencies \\

    implementation 'org.mongodb:mongodb-driver-sync:4.10.2'
    implementation 'org.mariadb.jdbc:mariadb-java-client:3.5.1'
    implementation 'javax.persistence:javax.persistence-api:2.2'
    implementation 'org.hibernate:hibernate-core:5.5.7.Final'
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes 'Main-Class' : 'isaacwallace123.ecoverse.Ecoverse'
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('paper-plugin.yml') {
        expand props
    }
}
